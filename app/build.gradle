import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

apply plugin: 'com.android.application'
//apply plugin: 'com.meituan.judasplugin'
apply plugin: 'io.objectbox'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'


android {

    signingConfigs {
        debug {
            storeFile file("${rootDir}/debug.keystore")
        }
    }

    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        //app package name
        applicationId "com.ddu"

        minSdkVersion    projectConfig.minSdkVersion
        targetSdkVersion projectConfig.targetSdkVersion
        versionCode      1
        versionName      "1.0"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }
        multiDexEnabled = true
    }
    buildTypes {
        debug {
            //debug模式
            manifestPlaceholders = [BUILD_TYPE_VALUE: "test"]
            signingConfig signingConfigs.debug
            versionNameSuffix "测试"
//            applicationIdSuffix ".debug"
        }
        release {
            //是否进行混淆
            minifyEnabled false
            //Zipalign优化
            zipAlignEnabled true
            //混淆文件位置
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            manifestPlaceholders = [BUILD_TYPE_VALUE: "release"]
        }

    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def buildName = variant.buildType.name
            println("buildName: ${buildName}")
            def formattedDate = new Date().format('yyyy.MM.dd.HH.mm')
            outputFileName = "app-${buildName}-${defaultConfig.versionName}-${formattedDate}.apk"
            if (buildName.equalsIgnoreCase("debug")) {
                def path = output.outputFile.absolutePath
                variant.assemble.doLast {
                    println(path)
                }
            }
        }
    }

    //移除lint检查的error
    lintOptions {
        abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
    productFlavors {
    }

    dataBinding {
        enabled = true
    }

//    configurations.all {
//        resolutionStrategy.force "com.android.support:support-annotations:$rootProject.supportLibraryVersion"
//        resolutionStrategy.force "com.android.support:support-compat:$rootProject.supportLibraryVersion"
//        resolutionStrategy.force "com.android.support:support-core-utils:$rootProject.supportLibraryVersion"
//    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':icore')
    implementation project(':iannotation')
    kapt project(':iprocessors')

    implementation 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.4@aar'

    implementation 'com.facebook.rebound:rebound:0.3.8'

    implementation 'org.quanqi:mpandroidchart:1.7.5'

    implementation 'com.google.android:flexbox:0.3.2'

    implementation 'com.google.zxing:core:3.3.0'
    implementation 'com.google.zxing:android-core:3.3.0'

    compile "io.objectbox:objectbox-android:$objectboxVersion"
    compile "io.objectbox:objectbox-kotlin:$objectboxVersion"
    kapt "io.objectbox:objectbox-processor:$objectboxVersion"
    annotationProcessor "io.objectbox:objectbox-processor:$objectboxVersion"

    implementation 'com.github.bumptech.glide:glide:4.5.0'
    implementation 'com.github.bumptech.glide:compiler:4.1.1'
    kapt 'com.github.bumptech.glide:compiler:4.5.0'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'

    implementation 'com.squareup.okhttp3:okhttp:3.9.1'
    implementation 'com.squareup.okio:okio:1.13.0'
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    implementation 'org.ligboy.retrofit2:converter-fastjson-android:2.1.0'

    implementation 'in.srain.cube:ultra-ptr:1.0.11'

    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.orhanobut:logger:2.1.1'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.22.3'

    implementation 'com.jakewharton.rxbinding2:rxbinding-kotlin:2.1.1'
}

final def log = project.logger
final def variants = project.android.applicationVariants
//在构建工程时，执行编织
variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.5",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}
repositories {
    mavenCentral()
    google()
}
