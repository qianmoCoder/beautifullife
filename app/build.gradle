import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

apply plugin: 'com.android.application'
apply plugin: 'io.objectbox'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def executeCommand(path) {
    def processMsg = "python build_android.py ${path}"
    println("process: ${processMsg}")
    int exitValue = processMsg.execute().waitFor()
    println("execute down: ${exitValue}")
}

android {

    signingConfigs {
        debug {
            storeFile file("${rootDir}/debug.keystore")
        }
    }

    compileSdkVersion Versions.compileSdkVersion
    buildToolsVersion Versions.buildToolsVersion

    defaultConfig {
        //app package name
        applicationId "com.ddu"

        minSdkVersion Versions.minSdkVersion
        targetSdkVersion Versions.targetSdkVersion
        versionCode Versions.versionCode
        versionName Versions.versionName

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }
        multiDexEnabled = true
    }
    buildTypes {
        debug {
            //debug模式
            manifestPlaceholders = [BUILD_TYPE_VALUE: "test"]
            signingConfig signingConfigs.debug

            versionNameSuffix "(debug)"
//            applicationIdSuffix ".debug"
        }

        release {
            //是否进行混淆
            minifyEnabled false
            //Zipalign优化
            zipAlignEnabled true
            //混淆文件位置
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            manifestPlaceholders = [BUILD_TYPE_VALUE: "release", UMENG_CHANNEL: "releaseChannel"]
        }

        qa.initWith(buildTypes.release)
        qa {
            // 指定在子模块中没找到对应的构建类型时要加载哪个类型，从前往后依次寻找
            matchingFallbacks = ['debug', 'release']
            manifestPlaceholders.replace("UMENG_CHANNEL", "qaChannel")
        }

    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def buildName = variant.buildType.name
            println("buildName: ${buildName}")
            def formattedDate = new Date().format('yyyy.MM.dd.HH.mm')
            outputFileName = "app-${buildName}-${defaultConfig.versionName}-${formattedDate}.apk"
            if (buildName.equalsIgnoreCase("debug")) {
                def path = output.outputFile.absolutePath
                variant.assemble.doLast {
//                    executeCommand(path)
                }
            }
        }
    }


    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def buildName = variant.buildType.name
            println("buildName: ${buildName}")
            def formattedDate = new Date().format('yyyy.MM.dd.HH.mm')
            outputFileName = "app-${buildName}-${defaultConfig.versionName}-${formattedDate}.apk"
            if (buildName.equalsIgnoreCase("debug")) {
                def path = output.outputFile.absolutePath
                variant.assemble.doLast {
                    println(path)
                }
            }
        }
    }

    //移除lint检查的error
    lintOptions {
        abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
    productFlavors {
    }

    dataBinding {
        enabled = true
    }

    configurations.all {
        resolutionStrategy {
            force 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'
        }
    }

//    configurations.all {
//        resolutionStrategy.force "com.android.support:support-annotations:$rootProject.supportLibraryVersion"
//        resolutionStrategy.force "com.android.support:support-compat:$rootProject.supportLibraryVersion"
//        resolutionStrategy.force "com.android.support:support-core-utils:$rootProject.supportLibraryVersion"
//    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':icore')
    implementation project(':iannotation')
    kapt project(':iprocessors')

    implementation Dependencies.rxpermissions

    implementation Dependencies.rebound

    implementation Dependencies.mpandroidchart

    implementation Dependencies.flexbox

    implementation Dependencies.zxing_core
    implementation Dependencies.zxing_android_core

    implementation Dependencies.objectbox_android
    implementation Dependencies.objectbox_kotlin
    kapt Dependencies.objectbox_processor
    annotationProcessor Dependencies.objectbox_processor

    debugImplementation Dependencies.leakcanary_android
    releaseImplementation Dependencies.leakcanary_android_no_op

    implementation Dependencies.glide
    implementation Dependencies.glide_compiler
    kapt Dependencies.glide_compiler

    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.squareup.okio:okio:1.14.0'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'
    implementation 'org.ligboy.retrofit2:converter-fastjson-android:2.1.0'

    implementation 'in.srain.cube:ultra-ptr:1.0.11'

    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    implementation 'com.orhanobut:logger:2.1.1'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.22.5'

    implementation 'com.jakewharton.rxbinding2:rxbinding-kotlin:2.1.1'

    implementation 'pub.devrel:easypermissions:1.2.0'


}

final def variants = project.android.applicationVariants
//在构建工程时，执行编织
variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        return
    }
    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.7",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]

        MessageHandler handler = new MessageHandler(true)
        new Main().run(args, handler)
    }
}